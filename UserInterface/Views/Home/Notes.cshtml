@{
    ViewData["Title"] = "Notes and Observations";
}

<h2>@ViewData["Title"]</h2>

<ul>
    <li>
        <strong>Time Invested</strong>
        <ul>
            <li>About 4 hours total, 2 to get my local environment set up for SQL Server and EF Migrations, 1.5 to code the application, and .5 to put these thoughts together and upload the repo</li>
        </ul>
    </li>
    <li>
        <strong>Requirements/Features Included</strong>
        <ul>
            <li>Created SQL database using EF code first approach with migrations</li>
            <li>CRUD functionality to add ToDoItems, view pending ToDoItems, mark ToDoItems complete, and delete ToDoItems</li>
            <li>MVC HomeController passes data to Views, and provides API routes for CRUD functionality</li>
            <li>Dependency Injection is used to provide a single instance of the ToDoRepository to Controllers</li>
        </ul>
    </li>
    <li>
        <strong>Shortfalls (what I would do with a little more time)</strong>
        <ul>
            <li>The ToDoItem data model provides for a DueDate field.  I didn't implement this because of time constraints.  It would be nice to have the view arrange ToDoItems by due date and add an accent (red highlight, etc) to items coming due soon.</li>
            <li>The DateCreated field in the ToDoItem data model is generated by the MVC application upon creation.  I would probably prefer to have this done at the database level using a default value of GETDATE().</li>
            <li>The markup is quick and dirty.  With more time I would pretty it up some, and I wouldn't litter the markup with inline styles.</li>
            <li>The SQL connection string is hard coded in a few spots.  With more time I would use dependency injection or a configuration value to get the connection string into the application in a more flexible way.</li>
            <li>The Priority1ToDoRepository has the capability to get all ToDoItems.  With more time I would have allowed the user to reveal already completed items if desired.</li>
        </ul>
    </li>
</ul>